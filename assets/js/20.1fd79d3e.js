(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{375:function(t,e,s){"use strict";s.r(e);var a=s(42),r=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"自定义提供者介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#自定义提供者介绍"}},[t._v("#")]),t._v(" 自定义提供者介绍")]),t._v(" "),s("p",[t._v("在前面的章节中，我们介绍了**依赖注入(DI)**的各个方面以及如何在 "),s("code",[t._v("Nest")]),t._v(" 中使用它。其中也给例子是基于构造函数的依赖项注入，用于将实例(通常是服务提供者)注入类。当您了解到依赖注入是以一种基本的方式构建到 "),s("code",[t._v("Nest")]),t._v(" 内核中时，您不会感到惊讶。到目前为止，我们仅探讨了一种主要模式。随着应用程序变得越来越复杂，您可能需要利用 "),s("code",[t._v("DI")]),t._v(" 系统的全部功能，因此让我们对其进行更详细的研究。")]),t._v(" "),s("h2",{attrs:{id:"di基础知识"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#di基础知识"}},[t._v("#")]),t._v(" DI基础知识")])])}),[],!1,null,null,null);e.default=r.exports}}]);